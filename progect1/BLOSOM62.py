s1 = 'ARN'
s2 = 'GTXQ'
amino_acid_similarity_matrix = \
    [[' ', 'A', 'R', 'N', 'D', 'C', 'Q', 'E', 'G', 'H', 'I', 'L',
        'K', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V', 'B', 'Z', 'X'],
       ['A', 4, -1, -2, -2, 0, -1, -1, 0, -2, -1, -1, -1, -1, -2, -1, 1, 0, -3, -2, 0, -2, -1, 0],
       ['R', -1, 5, 0, -2, -3, 1, 0, -2, 0, -3, -2, 2, -1, -3, -2, -1, -1, -3, -2, -3, -1, 0, -1],
       ['N', -2, 0, 6, 1, -3, 0, 0, 0, 1, -3, -3, 0, -2, -3, -2, 1, 0, -4, -2, -3, 3, 0, -1],
       ['D', -2, -2, 1, 6, -3, 0, 2, -1, -1, -3, -4, -1, -3, -3, -1, 0, -1, -4, -3, -3, 4, 1, -1],
       ['C', 0, -3, -3, -3, 9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -3, -3, -2],
       ['Q', -1, 1, 0, 0, -3, 5, 2, -2, 0, -3, -2, 1, 0, -3, -1, 0, -1, -2, -1, -2, 0, 3, -1],
       ['E', -1, 0, 0, 2, -4, 2, 5, -2, 0, -3, -3, 1, -2, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1],
       ['G', 0, -2, 0, -1, -3, -2, -2, 6, -2, -4, -4, -2, -3, -3, -2, 0, -2, -2, -3, -3, -1, -2, -1],
       ['H', -2, 0, 1, -1, -3, 0, 0, -2, 8, -3, -3, -1, -2, -1, -2, -1, -2, -2, 2, -3, 0, 0, -1],
       ['I', -1, -3, -3, -3, -1, -3, -3, -4, -3, 4, 2, -3, 1, 0, -3, -2, -1, -3, -1, 3, -3, -3, -1],
       ['L', -1, -2, -3, -4, -1, -2, -3, -4, -3, 2, 4, -2, 2, 0, -3, -2, -1, -2, -1, 1, -4, -3, -1],
       ['K', -1, 2, 0, -1, -3, 1, 1, -2, -1, -3, -2, 5, -1, -3, -1, 0, -1, -3, -2, -2, 0, 1, -1],
       ['M', -1, -1, -2, -3, -1, 0, -2, -3, -2, 1, 2, -1, 5, 0, -2, -1, -1, -1, -1, 1, -3, -1, -1],
       ['F', -2, -3, -3, -3, -2, -3, -3, -3, -1, 0, 0, -3, 0, 6, -4, -2, -2, 1, 3, -1, -3, -3, -1],
       ['P', -1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4, 7, -1, -1, -4, -3, -2, -2, -1, -2],
       ['S', 1, -1, 1, 0, -1, 0, 0, 0, -1, -2, -2, 0, -1, -2, -1, 4, 1, -3, -2, -2, 0, 0, 0],
       ['T', 0, -1, 0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1, 1, 5, -2, -2, 0, -1, -1, 0],
       ['W', -3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1, 1, -4, -3, -2, 11, 2, -3, -4, -3, -2],
       ['Y', -2, -2, -2, -3, -2, -1, -2, -3, 2, -1, -1, -2, -1, 3, -3, -2, -2, 2, 7, -1, -3, -2, -1],
       ['V', 0, -3, -3, -3, -1, -2, -2, -3, -3, 3, 1, -2, 1, -1, -2, -2, 0, -3, -1, 4, -3, -2, -1],
       ['B', -2, -1, 3, 4, -3, 0, 1, -1, 0, -3, -4, 0, -3, -3, -2, 0, -1, -4, -3, -3, 4, 1, -1],
       ['Z', -1, 0, 0, 1, -3, 3, 4, -2, 0, -3, -3, 1, -1, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1],
       ['X', 0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, 0, 0, -2, -1, -1, -1, -1, -1]]
matrix = [['' for j in range(len(s1) + 2)] for i in range(len(s2) + 2)]  # i - строчки, j - стольбцы [i][j]
k = 2
for symbol in s1:
    matrix[0][k] = symbol
    k += 1
k = 2
for symbol in s2:
    matrix[k][0] = symbol
    k += 1                         # задал строку и столбец с буквами
print(' Введите штраф за разрыв: ')
d = int(input())
for j in range(1, (len(s1) + 2)):
    matrix[1][j] = (j - 1) * d    # задал первую строку
for i in range(1, (len(s2) + 2)):
    matrix[i][1] = (i - 1) * d      # задал первый столбец
for j in range(2, len(s1) + 2):
    for i in range(2, len(s2) + 2):
        for k in range(1, 25):
            if matrix[0][j] == amino_acid_similarity_matrix[0][k]:
                column = k
                break
        for k in range(1, 25):
            if matrix[i][0] == amino_acid_similarity_matrix[0][k]:
                line = k
                break
        s = amino_acid_similarity_matrix[line][column]
        print(s)
        a = [matrix[i - 1][j] + d, matrix[i][j - 1] + d, (matrix[i - 1][j - 1] + s)]
        a.sort()
        matrix[i][j] = a[2]  # Выбрал максимальный счёт
print(matrix)
j = len(s1) + 1
i = len(s2) + 1
s1 = ''
s2 = ''
def comeback ():
    global s1, s2, i, j
    for k in range(1, 25):
        if matrix[0][j] == amino_acid_similarity_matrix[0][k]:
            column = k
            break
    for k in range(1, 25):
        if matrix[i][0] == amino_acid_similarity_matrix[0][k]:
            line = k
            break
    s = amino_acid_similarity_matrix[line][column]
    if i == 1 and j == 1:
        s1 = s1
        s2 = s2
    elif i >= 2 and matrix[i][j] == matrix[i - 1][j] + d:
        s1 = '-' + s1
        s2 = matrix[i][0] + s2
        i -= 1  # если стрелочка вверх, то я в верхнюю последовательность записываю -
    elif i >= 2 and j >= 2 and matrix[i][j] == matrix[i - 1][j - 1] + s:
        s2 = matrix[i][0] + s2
        s1 = matrix[0][j] + s1
        i -= 1
        j -= 1
    elif j >= 2 and matrix[i][j] == matrix[i][j - 1] + d:
        s1 = matrix[0][j] + s1
        s2 = '-' + s2
        j -= 1


while i != 1 and j != 1:
    comeback()
print(' ' + s1, '\n', s2)
